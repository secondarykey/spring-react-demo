plugins {
	id 'org.springframework.boot' version '2.6.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'me.champeau.jmh' version '0.6.5' apply false
	id 'java'
	id 'war'
}

group = 'com.example.demo'
version = '0.5.0-SNAPSHOT'

sourceCompatibility = '17'

repositories {
	mavenCentral()
}

sourceSets {
    batch {
        java {
            srcDirs 'src/batch/java'
        }
        resources {
            srcDirs 'src/batch/resources'
        }
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

dependencies {

    runtimeOnly 'com.h2database:h2'
    //runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.apache.logging.log4j:log4j-api:2.16.0'
	
    implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.google.code.gson:gson:2.8.9'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    testImplementation "org.mockito:mockito-core:3.+"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'
    testImplementation 'org.junit.platform:junit-platform-suite-engine:1.8.2'
    testImplementation 'org.openjdk.jmh:jmh-core:1.34'
    testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.34'

    batchImplementation 'org.springframework.boot:spring-boot-starter-batch'
}

test {
	useJUnitPlatform()
}

task copyFE(type: Copy) {
    from './src/frontend/build'
    into './src/main/resources/static'
}

task buildFE(type: Exec) {
    workingDir './src/frontend'
    commandLine "npm.cmd","run", "build"
}

tasks.named("processBatchResources").configure {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task batchJar(type: Jar) {

  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  classifier = "batch"

  manifest {
    attributes(
      'Main-Class': 'com.example.demo.BatchApplication'
    )
  }
  from sourceSets.batch.output 
  from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  with jar
}

task copyBatchDependencies(type:Copy) {
    def dir = "build/libs/jars"

    new File(dir).mkdirs()
    copy {
        from sourceSets.batch.runtimeClasspath
        exclude "application-batch.properties"
        exclude "com"
        into dir
    }
}
