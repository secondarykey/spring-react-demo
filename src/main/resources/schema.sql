DROP TABLE IF EXISTS USERS;
DROP TABLE IF EXISTS ROLE;
DROP TABLE IF EXISTS ORGANIZATION;
DROP TABLE IF EXISTS WORKER;
DROP TABLE IF EXISTS OPERATION_LANGUAGE;
DROP TABLE IF EXISTS OPERATION;
DROP TABLE IF EXISTS DAY;

DROP TABLE IF EXISTS TODOS;
DROP TABLE IF EXISTS TIMES;
DROP TABLE IF EXISTS PLAN_DETAILS;
DROP TABLE IF EXISTS PLANS;
DROP TABLE IF EXISTS PLACES;

CREATE TABLE ROLE(
    ID VARCHAR(16) PRIMARY KEY,
    NAME VARCHAR(128)
);

CREATE TABLE ORGANIZATION (
    ID SERIAL PRIMARY KEY,
    ORGANIZATION_ID INTEGER,
    NAME VARCHAR(128),
    PARENT INTEGER,
    "START" DATE,
    "END" DATE
);


CREATE TABLE OPERATION (
    ID SERIAL PRIMARY KEY,
    OPERATION_ID INTEGER,
    ORGANIZATION_ID INTEGER,
    SEQ INTEGER,
    "START" DATE,
    "END" DATE
);

CREATE TABLE OPERATION_LANGUAGE (
    ID SERIAL PRIMARY KEY,
    OPERATION_ID INTEGER,
    LANGUAGE VARCHAR(8),
    NAME VARCHAR(128)
);


CREATE TABLE USERS (
    ID VARCHAR(255) PRIMARY KEY,
    NAME VARCHAR(255),
    PASSWORD VARCHAR(255),
    ROLE VARCHAR(16),
    BELONG INTEGER,
    LANGUAGE VARCHAR(8),
    EXPIRY TIMESTAMP WITH TIME ZONE,
    FOREIGN KEY(ROLE) REFERENCES ROLE(ID),
    FOREIGN KEY(BELONG) REFERENCES ORGANIZATION(ID)
);

CREATE TABLE WORKER (
    ID SERIAL PRIMARY KEY,
    OPERATION_ID INTEGER,
    USER_ID VARCHAR(255),
    "DATE" DATE
);

CREATE TABLE TODOS (
    ID SERIAL PRIMARY KEY,
    "VALUE" VARCHAR(32)
);

CREATE TABLE TIMES (
    ID SERIAL PRIMARY KEY,
    "VALUE" VARCHAR(32),
    "DATE" date,
    "TIME" time,
    DATE_WITHOUT TIMESTAMP WITHOUT TIME ZONE,
    OFFSET_WITH TIMESTAMP WITH TIME ZONE
);

CREATE TABLE PLACES (
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(128),
    TIMEZONE VARCHAR(32)
);

CREATE TABLE DAY (
    ID SERIAL PRIMARY KEY,
    ORGANIZATION_ID INTEGER,
    "DAY" DATE,
    "VALUE" INTEGER
);

CREATE TABLE PLANS (
  ID SERIAL PRIMARY KEY,
  PLACES_ID INTEGER,
  DATE TIMESTAMP WITHOUT TIME ZONE,
  FOREIGN KEY(PLACES_ID) REFERENCES PLACES(ID)
);

CREATE TABLE PLAN_DETAILS (
  ID SERIAL PRIMARY KEY,
  PLANS_ID INTEGER,
  NAME VARCHAR(128),
  START TIMESTAMP WITHOUT TIME ZONE,
  "END" TIMESTAMP WITHOUT TIME ZONE,
  FOREIGN KEY(PLANS_ID) REFERENCES PLANS(ID)
);



DROP TABLE  BATCH_STEP_EXECUTION_CONTEXT IF EXISTS;
DROP TABLE  BATCH_JOB_EXECUTION_CONTEXT IF EXISTS;
DROP TABLE  BATCH_STEP_EXECUTION IF EXISTS;
DROP TABLE  BATCH_JOB_EXECUTION_PARAMS IF EXISTS;
DROP TABLE  BATCH_JOB_EXECUTION IF EXISTS;
DROP TABLE  BATCH_JOB_INSTANCE IF EXISTS;

DROP SEQUENCE  BATCH_STEP_EXECUTION_SEQ IF EXISTS;
DROP SEQUENCE  BATCH_JOB_EXECUTION_SEQ IF EXISTS;
DROP SEQUENCE  BATCH_JOB_SEQ IF EXISTS;

CREATE TABLE BATCH_JOB_INSTANCE  (
	JOB_INSTANCE_ID BIGINT IDENTITY NOT NULL PRIMARY KEY ,
	VERSION BIGINT ,
	JOB_NAME VARCHAR(100) NOT NULL,
	JOB_KEY VARCHAR(32) NOT NULL,
	constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
) ;

CREATE TABLE BATCH_JOB_EXECUTION  (
	JOB_EXECUTION_ID BIGINT IDENTITY NOT NULL PRIMARY KEY ,
	VERSION BIGINT  ,
	JOB_INSTANCE_ID BIGINT NOT NULL,
	CREATE_TIME TIMESTAMP NOT NULL,
	START_TIME TIMESTAMP DEFAULT NULL ,
	END_TIME TIMESTAMP DEFAULT NULL ,
	STATUS VARCHAR(10) ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED TIMESTAMP,
	JOB_CONFIGURATION_LOCATION VARCHAR(2500) NULL,
	constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
	references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
) ;

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
	JOB_EXECUTION_ID BIGINT NOT NULL ,
	TYPE_CD VARCHAR(6) NOT NULL ,
	KEY_NAME VARCHAR(100) NOT NULL ,
	STRING_VAL VARCHAR(250) ,
	DATE_VAL TIMESTAMP DEFAULT NULL ,
	LONG_VAL BIGINT ,
	DOUBLE_VAL DOUBLE PRECISION ,
	IDENTIFYING CHAR(1) NOT NULL ,
	constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE TABLE BATCH_STEP_EXECUTION  (
	STEP_EXECUTION_ID BIGINT IDENTITY NOT NULL PRIMARY KEY ,
	VERSION BIGINT NOT NULL,
	STEP_NAME VARCHAR(100) NOT NULL,
	JOB_EXECUTION_ID BIGINT NOT NULL,
	START_TIME TIMESTAMP NOT NULL ,
	END_TIME TIMESTAMP DEFAULT NULL ,
	STATUS VARCHAR(10) ,
	COMMIT_COUNT BIGINT ,
	READ_COUNT BIGINT ,
	FILTER_COUNT BIGINT ,
	WRITE_COUNT BIGINT ,
	READ_SKIP_COUNT BIGINT ,
	WRITE_SKIP_COUNT BIGINT ,
	PROCESS_SKIP_COUNT BIGINT ,
	ROLLBACK_COUNT BIGINT ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED TIMESTAMP,
	constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT  (
	STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT LONGVARCHAR ,
	constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
	references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
) ;

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
	JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT LONGVARCHAR ,
	constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE SEQUENCE BATCH_STEP_EXECUTION_SEQ;
CREATE SEQUENCE BATCH_JOB_EXECUTION_SEQ;
CREATE SEQUENCE BATCH_JOB_SEQ;